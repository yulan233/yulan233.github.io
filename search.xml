<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>3DRpg-5-MouseManager鼠标点击移动方法</title>
    <url>/posts/ff326c84.html</url>
    <content><![CDATA[<h1 id="UnityEvent"><a href="#UnityEvent" class="headerlink" title="UnityEvent"></a>UnityEvent</h1><p>使用了UnityEngine.Events这个Unity内置的事件来作为触发<br><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于这里不是继承MonoBehaviour所以需要序列化后才能在unity中显示</span></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventVector3</span>:<span class="title">UnityEvent</span>&lt;<span class="title">Vector3</span>&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存射线碰撞的信息</span></span><br><span class="line">    RaycastHit hitInfo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> EventVector3 OnMouseClicked;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span> &#123;</span><br><span class="line">        SetCursorTexture();</span><br><span class="line">        MouseControl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetCursorTexture</span>()</span>&#123;</span><br><span class="line">        Ray ray=Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">        <span class="keyword">if</span>(Physics.Raycast(ray,<span class="keyword">out</span> hitInfo))&#123;</span><br><span class="line">            <span class="comment">//切换鼠标贴图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击后传入我们的hitinfo的position（点击的位置）传入Event</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MouseControl</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Input.GetMouseButtonDown(<span class="number">0</span>)&amp;&amp;hitInfo.collider!=<span class="literal">null</span>)&#123;</span><br><span class="line">	        <span class="comment">//这里是触碰到的物体的标签是Ground时执行这个事件，也就是说只有摸到地面的时候才执行</span></span><br><span class="line">            <span class="keyword">if</span>(hitInfo.collider.gameObject.CompareTag(<span class="string">&quot;Ground&quot;</span>))&#123;</span><br><span class="line">                OnMouseClicked?.Invoke(hitInfo.point);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个脚本挂载在场景中的<code>MouseManager</code>中，然后添加一个物体的函数注册到这个事件中去。</p>
<p><img src="/posts/ff326c84/Snipaste_2023-03-26_20-39-40.png" alt></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>游戏引擎</category>
        <category>Unity</category>
        <category>3DRPG</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>unity</tag>
        <tag>游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>3DRpg-4-Navigation智能导航场景</title>
    <url>/posts/c156556f.html</url>
    <content><![CDATA[<h1 id="Navigation智能导航场景"><a href="#Navigation智能导航场景" class="headerlink" title="Navigation智能导航场景"></a>Navigation智能导航场景</h1><p>这里使用navigation做一个场景的一个可移动和不可移动的区域的划分</p>
<p><img src="/posts/c156556f/Snipaste_2023-03-26_20-07-00.png" alt><br>这里是可以让这个物体设置成静态的，然后最后一个选项是选择他是可以走动的还是不可以走动的</p>
<p><img src="/posts/c156556f/Snipaste_2023-03-26_20-07-10.png" alt><br>这里是设置我们要移动的物体可以上坡的一个度数</p>
<p><img src="/posts/c156556f/Snipaste_2023-03-26_20-07-17.png" alt><br>这里我们可以使用Bake来烘焙我们的场景，让这个智能导航生效</p>
<p><img src="/posts/c156556f/Snipaste_2023-03-26_20-07-28.png" alt><br>我们需要给我们的角色添加上Nav Mesh Agent这个组件来和我们的这个navigation产生一个互动</p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>游戏引擎</category>
        <category>Unity</category>
        <category>3DRPG</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>unity</tag>
        <tag>游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>3DRpg-6-SetCursor设置鼠标图标和单例模式</title>
    <url>/posts/c05a1912.html</url>
    <content><![CDATA[<p><code>MouseManager.cs</code><br><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="comment">// using UnityEngine.Events;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于这里不是继承MonoBehaviour所以需要序列化后才能在unity中显示</span></span><br><span class="line"><span class="comment">// [System.Serializable]</span></span><br><span class="line"><span class="comment">// public class EventVector3:UnityEvent&lt;Vector3&gt;&#123;&#125;</span></span><br><span class="line"><span class="comment">//起初的拖拽式的添加方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MouseManager</span>: <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="comment">//一个简单的单例模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MouseManager Instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取图片的变量</span></span><br><span class="line">    <span class="keyword">public</span> Texture2D point, doorway, attack, target, arrow;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存射线碰撞的信息</span></span><br><span class="line">    RaycastHit hitInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public EventVector3 OnMouseClicked;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action &lt; Vector3 &gt; OnMouseClicked;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span> &#123;</span><br><span class="line">        <span class="comment">//单例的一个实现，如果已经存在一个Instance了那么就不用在出现一个MouseManager了，就销毁自身</span></span><br><span class="line">        <span class="keyword">if</span> (Instance != <span class="literal">null</span>) Destroy(gameObject);</span><br><span class="line">        Instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span> &#123;</span><br><span class="line">        SetCursorTexture();</span><br><span class="line">        MouseControl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetCursorTexture</span>()</span> &#123;</span><br><span class="line">            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">            <span class="keyword">if</span> (Physics.Raycast(ray, <span class="keyword">out</span> hitInfo)) &#123;</span><br><span class="line">                <span class="comment">//切换鼠标贴图</span></span><br><span class="line">                <span class="keyword">switch</span> (hitInfo.collider.gameObject.tag) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;Ground&quot;</span>:</span><br><span class="line">                        <span class="comment">//这里中间的Vector2是一个偏移，因为这张图片是一个圆的狙击镜类似的，所以要让鼠标点保持在这张图片的中间</span></span><br><span class="line">                        Cursor.SetCursor(target, <span class="keyword">new</span> Vector2(<span class="number">16</span>, <span class="number">16</span>), CursorMode.Auto);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="literal">default</span>:</span><br><span class="line">                        Cursor.SetCursor(arrow, <span class="keyword">new</span> Vector2(<span class="number">16</span>, <span class="number">16</span>), CursorMode.Auto);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//点击后传入我们的hitinfo的position（点击的位置）传入Event</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MouseControl</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>) &amp;&amp; hitInfo.collider != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hitInfo.collider.gameObject.CompareTag(<span class="string">&quot;Ground&quot;</span>)) &#123;</span><br><span class="line">                OnMouseClicked ? .Invoke(hitInfo.point);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>PlayerController.cs</code><br><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.AI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerController</span>: <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> NavMeshAgent agent;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span> &#123;</span><br><span class="line">        agent = GetComponent &lt; NavMeshAgent &gt; ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span> &#123;</span><br><span class="line">        MouseManager.Instance.OnMouseClicked += MoveToTarget;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MoveToTarget</span>(<span class="params">Vector3 target</span>)</span> &#123;</span><br><span class="line">        agent.destination = target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里添加之前的没写的鼠标图标的切换的功能和切换了使用C#内置的事件来代替之前的Unity内置事件，添加了一个<code>PlayerController</code>来管理玩家</p>
<p><img src="/posts/c05a1912/Snipaste_2023-03-26_21-26-37.png" alt><br>整理Scripts文件夹，将Manager和Controller分开</p>
<p><img src="/posts/c05a1912/Snipaste_2023-03-26_21-18-51.png" alt><br>图标可以在麦扣老师的视频底下下载，图标设置成这样，不然可能会报黄色警报，开启<code>Alpha Is Transparency</code>可以将背景设为透明，<code>Format</code>设置成<code>RGB 32</code>，关闭<code>Generate Mip Maps</code>和打开<code>Read/Write</code>，我也不知道为啥要打开最后这个读取或写入，因为报警告所以试着打开后就不报了。</p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>游戏引擎</category>
        <category>Unity</category>
        <category>3DRPG</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>unity</tag>
        <tag>游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>3DRpg-7-Cinemachine与后处理</title>
    <url>/posts/e9066b58.html</url>
    <content><![CDATA[<h1 id="Cinemachine相机跟随"><a href="#Cinemachine相机跟随" class="headerlink" title="Cinemachine相机跟随"></a>Cinemachine相机跟随</h1><p>这里使用的是一个CInemachine这个插件控制我们的相机跟随人物的移动<br>先在PackageManager中安装Cinemachine这个插件<br>然后添加一个virtual camera，在main camera中添加我们的CinemachineVirtualCamera组件<br>最后在其中设置好我们的设置就行<br><img src="/posts/e9066b58/Snipaste_2023-03-28_14-04-23.png" alt><br><img src="/posts/e9066b58/Snipaste_2023-03-28_14-06-09.png" alt><br>Body:<br>3rd Person Follow：持续跟随目标移动</p>
<p>Farming Transposer：在屏幕空间计算相机和目标的偏移值</p>
<p>Hard Lock To Target：将相机和目标的位置、朝向进行绑定</p>
<p>Obital Transposer：根据输入绕目标旋转<br>Aim:<br>Group Composer：跟踪群体中的某个位置</p>
<p>POV：模拟第一人称相机的视野控制</p>
<p>Hard Look At：锁定一个目标</p>
<p>Same As Follow：跟踪一个目标</p>
<h1 id="后处理"><a href="#后处理" class="headerlink" title="后处理"></a>后处理</h1><p>这里在场景中添加一个Global Volume，是URP会自动添加<br><img src="/posts/e9066b58/Snipaste_2023-03-28_14-11-46.png" alt><br><img src="/posts/e9066b58/Snipaste_2023-03-28_14-12-42.png" alt></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>游戏引擎</category>
        <category>Unity</category>
        <category>3DRPG</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>unity</tag>
        <tag>游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>3DRpg-8-动画控制器</title>
    <url>/posts/ea7ee876.html</url>
    <content><![CDATA[<h1 id="Animator"><a href="#Animator" class="headerlink" title="Animator"></a>Animator</h1><p>设置一个动画使用Animator，先创建一个Animtor Controller，添加到这个控制器中<br><img src="/posts/ea7ee876/Snipaste_2023-03-28_14-32-10.png" alt><br><img src="/posts/ea7ee876/Snipaste_2023-03-28_14-32-48.png" alt><br><img src="/posts/ea7ee876/Snipaste_2023-03-28_14-34-00.png" alt><br><img src="/posts/ea7ee876/GIF%202023-3-28%2014-41-44.gif" alt></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>游戏引擎</category>
        <category>Unity</category>
        <category>3DRPG</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>unity</tag>
        <tag>游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>3DRpg-9-Shader Graph 遮挡剔除</title>
    <url>/posts/547da389.html</url>
    <content><![CDATA[<p>这里使用了Shader Graph和URP制作了一个遮挡剔除</p>
<h1 id="Shader-Graph"><a href="#Shader-Graph" class="headerlink" title="Shader Graph"></a>Shader Graph</h1><p><img src="/posts/547da389/Snipaste_2023-03-28_15-08-24.png" alt></p>
<h1 id="URP设置"><a href="#URP设置" class="headerlink" title="URP设置"></a>URP设置</h1><p><img src="/posts/547da389/Snipaste_2023-03-28_15-09-35.png" alt></p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/posts/547da389/GIF%202023-3-28%2015-15-02.gif" alt></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>游戏引擎</category>
        <category>Unity</category>
        <category>3DRPG</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>unity</tag>
        <tag>游戏开发</tag>
        <tag>ShaderGraph</tag>
        <tag>Shader</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode下C编译环境的配置</title>
    <url>/posts/e96e65a6.html</url>
    <content><![CDATA[<h1 id="需要"><a href="#需要" class="headerlink" title="需要"></a>需要</h1><p>一堆东西如</p>
<ol>
<li><p>一个vscode（哪里下载，官网下载，官网在哪，百度一下）</p>
</li>
<li><p>MingW64（哪里下载，<a href="https://sourceforge.net/projects/mingw-w64/files/">点击这里</a>）</p>
<p><img src="/posts/e96e65a6/VeryCapture_20220630105828.jpg" alt="VeryCapture_20220630105828"></p>
</li>
</ol>
<span id="more"></span>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>解压你下载的MingW64编译器到你能找到的位置；然后在系统环境中配置你的MingW64</p>
<p><img src="/posts/e96e65a6/VeryCapture_20220630110243.jpg" alt="VeryCapture_20220630110243"></p>
<p>配置完后打开你的vscode安装几个插件<img src="/posts/e96e65a6/VeryCapture_20220630110503.jpg" alt="VeryCapture_20220630110503"></p>
<p>这个应该就可以了，然后打开这个插件的配置，配置你的编译器位置和模式</p>
<p><img src="/posts/e96e65a6/VeryCapture_20220630110653.jpg" alt="VeryCapture_20220630110653"></p>
<p><img src="/posts/e96e65a6/VeryCapture_20220630110721.jpg" alt="VeryCapture_20220630110721"></p>
<h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><p>之后随意打开一个文件夹写一个c语言程序<img src="/posts/e96e65a6/VeryCapture_20220630111319.jpg" alt="VeryCapture_20220630111319"></p>
<p><img src="/posts/e96e65a6/VeryCapture_20220630111345.jpg" alt="VeryCapture_20220630111345"></p>
<p>之后修改这几项</p>
<p><img src="/posts/e96e65a6/VeryCapture_20220630111737.jpg" alt="VeryCapture_20220630111737"></p>
<p>这个时候需要了解一些基本知识</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;workspaceFolder&#125;</span> :表示当前workspace文件夹路径，也即C:\Users\admin\Desktop\<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;workspaceRootFolderName&#125;</span>:表示workspace的文件夹名，也即<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;file&#125;</span>:文件自身的绝对路径，也即C:\Users\admin\Desktop\<span class="built_in">test</span>\.vscode\launch.json</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;relativeFile&#125;</span>:文件在workspace中的路径，也即.vscode\launch.json</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;fileBasenameNoExtension&#125;</span>:当前文件的文件名，不带后缀，也即launch</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;fileBasename&#125;</span>:当前文件的文件名，launch.json</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;fileDirname&#125;</span>:文件所在的文件夹路径，也即C:\Users\admin\Desktop\<span class="built_in">test</span>\.vscode</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;fileExtname&#125;</span>:当前文件的后缀，也即.json</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;lineNumber&#125;</span>:当前文件光标所在的行号</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;env:PATH&#125;</span>:系统中的环境变量</span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;workspaceFolder&#125;</span> - the path of the folder opened <span class="keyword">in</span> VS Code</span><br><span class="line"><span class="variable">$&#123;workspaceRootFolderName&#125;</span> - the name of the folder opened <span class="keyword">in</span> VS Code without any slashes (/)</span><br><span class="line"><span class="variable">$&#123;file&#125;</span> - the current opened file</span><br><span class="line"><span class="variable">$&#123;relativeFile&#125;</span> - the current opened file relative to workspaceRoot</span><br><span class="line"><span class="variable">$&#123;fileBasename&#125;</span> - the current opened file<span class="string">&#x27;s basename</span></span><br><span class="line"><span class="string">$&#123;fileBasenameNoExtension&#125; - the current opened file&#x27;</span>s <span class="built_in">basename</span> with no file extension</span><br><span class="line"><span class="variable">$&#123;fileDirname&#125;</span> - the current opened file<span class="string">&#x27;s dirname</span></span><br><span class="line"><span class="string">$&#123;fileExtname&#125; - the current opened file&#x27;</span>s extension</span><br><span class="line"><span class="variable">$&#123;cwd&#125;</span> - the task runner<span class="string">&#x27;s current working directory on startup</span></span><br><span class="line"><span class="string">$&#123;lineNumber&#125; - the current selected line number in the active file</span></span><br></pre></td></tr></table></figure>
<p>经过修改后的文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) 启动&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;E:\\runjian\\mingw64\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span>  <span class="comment">// 调试前的预执行任务，这里的值是tasks.json文件中对应的编译任务，也就是调试前需要先编译</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这个时候直接启动就ok了</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>小知识</tag>
        <tag>vscode</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Function中bind()</title>
    <url>/posts/14846da0.html</url>
    <content><![CDATA[<p><code>bind()</code>方法会创建一个新函数，当这个新函数被调用时，它的<code>this</code>值是传递给<code>bind()</code>的第一个参数，它的参数是<code>bind()</code>的其他参数和其原本的参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">9</span>; </span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">module</span> = &#123;</span><br><span class="line"> <span class="attr">x</span>: <span class="number">81</span>,</span><br><span class="line"> <span class="attr">getX</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">getX</span>(); <span class="comment">// 返回 81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> retrieveX = <span class="variable language_">module</span>.<span class="property">getX</span>;</span><br><span class="line"><span class="title function_">retrieveX</span>(); <span class="comment">// 返回 9, 在这种情况下，&quot;this&quot;指向全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新函数，将&quot;this&quot;绑定到module对象</span></span><br><span class="line"><span class="comment">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = retrieveX.<span class="title function_">bind</span>(<span class="variable language_">module</span>);</span><br><span class="line"><span class="title function_">boundGetX</span>(); <span class="comment">// 返回 81</span></span><br></pre></td></tr></table></figure>
<p>通过绑定我们可以让this指向我们想要的对象上，可以实现很多操作，例如事件之类的功能。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>TypeScripts</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>TypeScripts</tag>
      </tags>
  </entry>
  <entry>
    <title>Hbuilder的vue前端环境搭建</title>
    <url>/posts/2a0710bf.html</url>
    <content><![CDATA[<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><p>安装好node.js，需要用到这个东西来启动vue</p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>用hbuilder提供的模板直接就可以创建一个vue项目<br><img src="/posts/2a0710bf/Snipaste_2021-10-07_18-06-22.png" alt></p>
<p><img src="/posts/2a0710bf/Snipaste_2021-10-07_18-07-00.png" alt></p>
<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><p>在设置运行环境中配置nodejs环境，安装你的安装位置找到你的nodejs，这里我选择的是外部终端，由于内部终端有问题不能用，我也没找到解决办法，所以就用了外部终端</p>
<span id="more"></span>
<p><img src="/posts/2a0710bf/Snipaste_2021-10-07_18-06-44.png" alt></p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>之后先编译构建然后运行然后就能在浏览器中运行你的vue了</p>
<p><img src="/posts/2a0710bf/Snipaste_2021-10-07_18-13-53.png" alt></p>
<p><img src="/posts/2a0710bf/Snipaste_2021-10-07_18-14-54.png" alt></p>
<p><img src="/posts/2a0710bf/Snipaste_2021-10-07_18-15-21.png" alt></p>
<p>输入上方的网址进入你的vue项目界面</p>
<p><img src="/posts/2a0710bf/Snipaste_2021-10-07_18-17-48.png" alt></p>
<p>之后在命令行按Ctrl+C就可以结束运行，也可以直接关掉。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>前端</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>LitJson的使用</title>
    <url>/posts/a73c11e7.html</url>
    <content><![CDATA[<h1 id="JSON的格式"><a href="#JSON的格式" class="headerlink" title="JSON的格式"></a>JSON的格式</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125;//花括号放的是数据，数据以键值对的方式存放,以逗号隔开</span><br><span class="line">&#123;</span><br><span class="line">	name:&quot;hello&quot;,</span><br><span class="line">	&quot;what&quot;:1</span><br><span class="line">&#125;</span><br><span class="line">[]//这种中括号方的是一系列数据，相当于数组，但是不一样，是用于存放&#123;&#125;的，或者一个数据</span><br></pre></td></tr></table></figure>
<h1 id="LitJson"><a href="#LitJson" class="headerlink" title="LitJson"></a>LitJson</h1><ul>
<li>使用C#认识的JsonData来处理生成Json字符串</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">JsonData jsondata1 = <span class="keyword">new</span> JsonData();</span><br><span class="line">jsondata1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;ZhangSan&quot;</span>;</span><br><span class="line">jsondata1[<span class="string">&quot;ID&quot;</span>] = <span class="number">123456</span>;</span><br><span class="line">jsondata1[<span class="string">&quot;sex&quot;</span>] = <span class="string">&quot;male&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> json1 = jsondata1.ToJson();</span><br><span class="line">print(json1);</span><br></pre></td></tr></table></figure>
<p>运行结果：<code>&#123;&quot;name&quot;:&quot;ZhangSan&quot;,&quot;ID&quot;:123456,&quot;sex&quot;:&quot;male&quot;&#125;</code></p>
<ul>
<li>对象中嵌套对象</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">JsonData jsondata2 = <span class="keyword">new</span> JsonData();</span><br><span class="line">jsondata2[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;LiSi&quot;</span>;</span><br><span class="line">jsondata2[<span class="string">&quot;info&quot;</span>] = <span class="keyword">new</span> JsonData();</span><br><span class="line">jsondata2[<span class="string">&quot;info&quot;</span>][<span class="string">&quot;ID&quot;</span>] = <span class="number">123457</span>;</span><br><span class="line">jsondata2[<span class="string">&quot;info&quot;</span>][<span class="string">&quot;sex&quot;</span>] = <span class="string">&quot;female&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> json2 = jsondata2.ToJson();</span><br><span class="line">print(json2);</span><br></pre></td></tr></table></figure>
<p>运行结果：<code>&#123;&quot;name&quot;:&quot;LiSi&quot;,&quot;info&quot;:&#123;&quot;ID&quot;:123457,&quot;sex&quot;:&quot;female&quot;&#125;&#125;</code><br>这里面使用了Jsondat中定义的方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ToJson</span>()</span>;</span><br></pre></td></tr></table></figure>
<h3 id="JsonMapper"><a href="#JsonMapper" class="headerlink" title="JsonMapper"></a><strong>JsonMapper</strong></h3><ul>
<li>使用JsonMapper将JsonData解析到Json字符串</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">JsonData jsondata = <span class="keyword">new</span> JsonData();</span><br><span class="line">jsondata[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;ZhangSan&quot;</span>;</span><br><span class="line">jsondata[<span class="string">&quot;ID&quot;</span>] = <span class="number">123456</span>;</span><br><span class="line">jsondata[<span class="string">&quot;sex&quot;</span>] = <span class="string">&quot;male&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> json = JsonMapper.ToJson(jsondata);</span><br><span class="line">print(json);</span><br></pre></td></tr></table></figure>
<p>运行结果：<code>&#123;&quot;name&quot;:&quot;ZhangSan&quot;,&quot;ID&quot;:123456,&quot;sex&quot;:&quot;male&quot;&#125;</code></p>
<ul>
<li>使用JsonMapper将对象解析到Json字符串</li>
</ul>
<p>自定义Player类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> ID;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Player player = <span class="keyword">new</span> Player();</span><br><span class="line">player.name = <span class="string">&quot;ZhangSan&quot;</span>;</span><br><span class="line">player.ID = <span class="number">123456</span>;</span><br><span class="line">player.sex = <span class="string">&quot;male&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> json = JsonMapper.ToJson(player);</span><br><span class="line">print(json);</span><br></pre></td></tr></table></figure>
<p>运行结果：<code>&#123;&quot;name&quot;:&quot;ZhangSan&quot;,&quot;ID&quot;:123456,&quot;sex&quot;:&quot;male&quot;&#125;</code></p>
<ul>
<li>使用JsonMapper将Json字符串解析到JsonData</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JsonData <span class="title">ToObject</span>(<span class="params"><span class="built_in">string</span> json</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>将上例中的Json字符串解析成JsonData</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">JsonData jsondata = JsonMapper.ToObject(json);</span><br><span class="line">print(jsondata[<span class="string">&quot;name&quot;</span>] + <span class="string">&quot;  &quot;</span> + jsondata[<span class="string">&quot;ID&quot;</span>] + <span class="string">&quot;  &quot;</span> + jsondata[<span class="string">&quot;sex&quot;</span>]);</span><br></pre></td></tr></table></figure>
<p>运行结果：<code>ZhangSan 123456 male</code></p>
<ul>
<li>使用JsonMapper将Json字符串解析到对象</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">ToObject</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> json</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>将上例中的json字符串解析成player对象</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Player player1 = JsonMapper.ToObject&lt;Player&gt;(json);</span><br><span class="line">print(player1.name +<span class="string">&quot;  &quot;</span> + player1.ID +<span class="string">&quot;  &quot;</span>+ player1.sex);</span><br></pre></td></tr></table></figure>
<p>运行结果：<code>ZhangSan 123456 male</code></p>
<h3 id="Jsondata的类型转换"><a href="#Jsondata的类型转换" class="headerlink" title="Jsondata的类型转换"></a><strong>Jsondata的类型转换</strong></h3><ul>
<li>Jsondata中定义了五种隐式转换，可以将（bool、double、int32、int64、string）类型隐式转换成Jsondata类型。</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">JsonData jsondata = <span class="keyword">new</span> JsonData();</span><br><span class="line">jsondata[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;ZhangSan&quot;</span>;</span><br><span class="line">jsondata[<span class="string">&quot;ID&quot;</span>] = <span class="number">123456</span>;</span><br><span class="line"><span class="comment">//jsondata[&quot;info&quot;] = new int[] &#123; 1, 2, 3 &#125;;</span></span><br><span class="line">jsondata[<span class="string">&quot;info&quot;</span>] = JsonMapper.ToObject(JsonMapper.ToJson(<span class="keyword">new</span> <span class="built_in">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;));</span><br><span class="line"><span class="built_in">string</span> json = jsondata.ToJson();</span><br><span class="line">print(json);</span><br></pre></td></tr></table></figure>
<p>运行结果：<code>&#123;&quot;name&quot;:&quot;ZhangSan&quot;,&quot;ID&quot;:123456,&quot;info&quot;:[1,2,3]&#125;</code></p>
<ul>
<li>Jsondata中定义了五种显式转换，可以将Jsondata类型显示转换成（bool、double、int32、int64、string）类型。</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> name = (<span class="built_in">string</span>)jsondata[<span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="built_in">int</span> id = (<span class="built_in">int</span>)jsondata[<span class="string">&quot;ID&quot;</span>];</span><br><span class="line"><span class="comment">// int[] info = (int[])jsondata[&quot;info&quot;];</span></span><br><span class="line"><span class="built_in">int</span>[] info = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; &#125;;</span><br><span class="line">info = JsonMapper.ToObject&lt;<span class="built_in">int</span>[]&gt;(jsondata[<span class="string">&quot;info&quot;</span>].ToJson());</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> info) print(i);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>CSharp</category>
        <category>库</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>库</tag>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Scons的简单使用</title>
    <url>/posts/95acef7c.html</url>
    <content><![CDATA[<h1 id="介绍和简单使用"><a href="#介绍和简单使用" class="headerlink" title="介绍和简单使用"></a>介绍和简单使用</h1><p>Scons是Python中的一个库，可以用于编译Cpp文件，我们需要在pip中安装Scons<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install Scons</span><br></pre></td></tr></table></figure><br>之后我们可以使用Scons命令来编译cpp文件。<br>我们需要在需要编译的文件夹下添加<code>Sconstruct</code>文件，在里面加入py代码，之后就可以启动命令行输入Scons命令来编译cpp<br>例子<br><code>Sconstruct</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Programe(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;main.cpp&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><br><code>main.cpp</code><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	std::cout&lt;&lt;<span class="string">&quot;hello world!&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这段简单的例子可以输出一个<code>hello</code>和一个<code>hello world</code> ，这是因为<code>Sconstruct</code>是一个py代码，会运行执行了一个<code>Program</code>编译过<code>main.cpp</code>后会运行<code>print</code>，在控制台会有其他的输出，如果你不想要可以使用 <code>-Q</code> 来忽略。</p>
<p>使用<code>StaticLibrary</code>是获得一个静态链接库来供其他cpp程序使用，使用方法类似于<code>Program</code>，在windows下会生成.lib在linux下会生成.a。</p>
<p>使用<code>SharedLibrary</code>是获得一个动态链接库，用法也于之前的方法类似，linux下生成一个.so，windows下生成一个.dll。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>CC 定义你用哪个编译器编译<br>CFLAGS 定义了C++标志<br>LIBS 定义你要使用的库<br>LIBPATHS 是库的路径<br>CPPPATH 是包含的文件路径<br>CPPDEFINES 是定义了我们想要在C++程序中定义的宏</p>
<h1 id="编译一个使用动态库的cpp"><a href="#编译一个使用动态库的cpp" class="headerlink" title="编译一个使用动态库的cpp"></a>编译一个使用动态库的cpp</h1><p>包含的文件<br>-src<br> -math.so<br> -math.h<br> -main.cpp<br> -Sconstruct<br><code>Sconstruct</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">env = Environment(LIBS=[<span class="string">&#x27;math&#x27;</span>],LIBPATH=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">env.Program(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;main.cpp&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>cpp</tag>
        <tag>编译</tag>
        <tag>cpp工具</tag>
      </tags>
  </entry>
  <entry>
    <title>cnpm的安装</title>
    <url>/posts/9d9d5327.html</url>
    <content><![CDATA[<p>这是一个小知识，由于npm的安装很慢，有时候还会出现错误，所以用其他的源进行安装，我看网上大部分用的都是淘宝的源，所以我这个也是用的他的源，我自己试过，确实好用，很多由于网络问题的东西都不报错了，能正常安装下载也快</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>
<p>这样就能用cnpm代替npm使用了。<br>其他方法可以参考<a href="https://npmmirror.com/">淘宝 NPM 镜像 (npmmirror.com)</a></p>
]]></content>
      <tags>
        <tag>小知识</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>UI管理器的实现</title>
    <url>/posts/ca9306b0.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>一个简单管理UI的一个管理类</p>
<h1 id="UIPanel"><a href="#UIPanel" class="headerlink" title="UIPanel"></a>UIPanel</h1><p>这个类是一个继承<code>MonoBehaviour</code>的抽象类，用于给其他的UI继承，是一个Panel基类</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Unity.VisualScripting;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">UIPanel</span>:<span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _path;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Path</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _path; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> GameObject root;</span><br><span class="line">    <span class="comment">//构造函数，创建时获取path</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIPanel</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _path = path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示隐藏关闭打开</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">OnShow</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">OnHiden</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">OnClose</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenPanel</span>()</span> =&gt; UIManager.Instance.OpenPanel(<span class="keyword">this</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HidenPanel</span>()</span> =&gt; UIManager.Instance.HidenPanel(<span class="keyword">this</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClosePanel</span>()</span> =&gt; UIManager.Instance.ClosePanel(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="UIManager"><a href="#UIManager" class="headerlink" title="UIManager"></a>UIManager</h1><p>这个类是一个单例模式的类，用于实现对UIPanel的管理，对UIPanel显示隐藏和开启关闭的功能，由一个字典和其他的方法构成</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Unity.VisualScripting;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Windows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//一个UIManager的单例模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UIManager _UIManagerInstance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UIManager Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_UIManagerInstance == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _UIManagerInstance = <span class="keyword">new</span> UIManager();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _UIManagerInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一个关于UIPanel的字典</span></span><br><span class="line">    Dictionary&lt;<span class="built_in">string</span>, UIPanel&gt; panelDic;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIManager</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        panelDic= <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, UIPanel&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddPanel</span>(<span class="params">UIPanel panel</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        panelDic[panel.name] = panel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 显示UI</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;panel&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenPanel</span>&lt;<span class="title">T</span>&gt;(<span class="params">T panel</span>) <span class="keyword">where</span> T : UIPanel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从字典中查找UI</span></span><br><span class="line">        <span class="keyword">if</span> (panelDic.TryGetValue(panel.name, <span class="keyword">out</span> UIPanel oldPanel))</span><br><span class="line">        &#123;</span><br><span class="line">            oldPanel.gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">            oldPanel.OnShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 显示UI</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenPanel</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从字典中查找UI</span></span><br><span class="line">        <span class="keyword">if</span> (panelDic.TryGetValue(name, <span class="keyword">out</span> UIPanel oldPanel))</span><br><span class="line">        &#123;</span><br><span class="line">            oldPanel.gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">            oldPanel.OnShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 隐藏UI</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;panel&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HidenPanel</span>&lt;<span class="title">T</span>&gt;(<span class="params">T panel</span>) <span class="keyword">where</span> T : UIPanel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从字典中查找UIPanel并将它设置成不显示</span></span><br><span class="line">        <span class="keyword">if</span> (panelDic.TryGetValue(panel.name, <span class="keyword">out</span> UIPanel oldPanel))</span><br><span class="line">        &#123;</span><br><span class="line">            oldPanel.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">            oldPanel.OnHiden();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 隐藏UI</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HidenPanel</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从字典中查找UIPanel并将它设置成不显示</span></span><br><span class="line">        <span class="keyword">if</span> (panelDic.TryGetValue(name, <span class="keyword">out</span> UIPanel oldPanel))</span><br><span class="line">        &#123;</span><br><span class="line">            oldPanel.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">            oldPanel.OnHiden();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 删除UI</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;panel&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClosePanel</span>&lt;<span class="title">T</span>&gt;(<span class="params">T panel</span>) <span class="keyword">where</span> T : UIPanel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从字典中查找UIPanel并将它移除</span></span><br><span class="line">        <span class="keyword">if</span> (panelDic.TryGetValue(panel.name, <span class="keyword">out</span> UIPanel oldPanel))</span><br><span class="line">        &#123;</span><br><span class="line">            panelDic.Remove(panel.name);</span><br><span class="line">            oldPanel.OnClose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 删除UI</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClosePanel</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从字典中查找UIPanel并将它移除</span></span><br><span class="line">        <span class="keyword">if</span> (panelDic.TryGetValue(name, <span class="keyword">out</span> UIPanel oldPanel))</span><br><span class="line">        &#123;</span><br><span class="line">            panelDic.Remove(name);</span><br><span class="line">            oldPanel.OnClose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过<code>UIManager</code>可以实现对<code>UIPanel</code>继承类的显示隐藏的控制，并且<code>UIManager</code>是一个静态类，单例模式，所以可以在任何地方使用这个类对各个<code>UIPanel</code>继承类进行管理，可以通过传入<code>UIPanel</code>继承类或者名字来进行控制，名字即为在场景中对象的名字</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>这里使用UI管理器完成了一个按键显示隐藏一个面板的功能</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FButton</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isShow = <span class="literal">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        gameObject.GetComponent&lt;Button&gt;().onClick.AddListener(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (isShow)</span><br><span class="line">            &#123;</span><br><span class="line">                UIManager.Instance.HidenPanel(<span class="string">&quot;Panel&quot;</span>);</span><br><span class="line">                isShow= <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                UIManager.Instance.OpenPanel(<span class="string">&quot;Panel&quot;</span>);</span><br><span class="line">                isShow = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我用的面板名字是Panel<br><img src="/posts/ca9306b0/动画.gif" alt></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>游戏引擎</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>unity</tag>
        <tag>游戏开发</tag>
        <tag>UI</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156.html</url>
    <content><![CDATA[<p>欢迎来到<a href="https://hexo.io/">Hexo</a>！这是一个很棒的文章。查看<a href="https://hexo.io/docs/">文档</a>去获取更多的信息。如果你有很多的问题当你使用Hexo，你能找到很多答案在<a href="https://hexo.io/docs/troubleshooting.html">问题解答</a>或你能向我提问在<a href="https://github.com/hexojs/hexo/issues">GitHub</a>。</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一个新页面"><a href="#创建一个新页面" class="headerlink" title="创建一个新页面"></a>创建一个新页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>更多信息： <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>更多信息： <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>更多信息： <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="部署到站点"><a href="#部署到站点" class="headerlink" title="部署到站点"></a>部署到站点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>更多信息： <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>Web</category>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>springMVC配置</title>
    <url>/posts/26f6cf92.html</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>我的环境是idea2021.3.1还有一个tomacat9</p>
<span id="more"></span>
<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p>首先我们先创建一个项目吧，通过maven原型创建一个webapp项目，他会给我们搭建好一个小框架然后我们要往里面添加我们需要的依赖了，在<code>pom.xml</code>里面添加这一串的依赖，可能有些不需要但是我也不想管了以后再说</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    springmvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0-alpha10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jackson依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.module<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-module-jaxb-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    fastjson--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.79<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="配置SpringMVC"><a href="#配置SpringMVC" class="headerlink" title="配置SpringMVC"></a>配置SpringMVC</h1><p>开始的时候先配置<code>web.xml</code>会有提供的打开后添加核心<code>serverlet</code>然后在添加<code>serverlet-mapping</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  配置核心serverlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置springMVC配置的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>之后就可去创建一个<code>springmvc.xml</code>在你的<code>resource</code>文件夹中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    开启注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.example.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    这一段在spring4之后已经有默认的了不配也可以，也可以直接用下面mvc:annotation-driven那一段代替，不过要记得选择mvc结尾的依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash;    配置注解映射器&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash;    配置注解适配器&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入前缀与后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置好了后就可以去写一个controller了，这里我写了一个简单的测试用的controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.entity.TestEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello spring mvc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findOne&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> TestEntity <span class="title function_">findOne</span><span class="params">()</span>&#123;</span><br><span class="line">        TestEntity testEntity=<span class="keyword">new</span> <span class="title class_">TestEntity</span>();</span><br><span class="line">        testEntity.setName(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        testEntity.setName2(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> testEntity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>@ResponseBody</code>是一个注解用于返回json数据而不用像以前一样用<code>void</code>返回类型然后返回一串转为json的数据</p>
<p>什么你说<code>TestEntity</code>是啥是一个实体类，用于接收数据和返回的东西，也可以使用<code>mybatis</code>来与数据库交互</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String name2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName2</span><span class="params">(String name2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name2 = name2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我的文件结构</p>
<p><img src="/posts/26f6cf92/VeryCapture_20220529164729.jpg" alt="VeryCapture_20220529164729"></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>Web</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>后端</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>unity创建一个新游戏（1）</title>
    <url>/posts/463f42bc.html</url>
    <content><![CDATA[<h1 id="创建一个新项目"><a href="#创建一个新项目" class="headerlink" title="创建一个新项目"></a>创建一个新项目</h1><h2 id="unity安装"><a href="#unity安装" class="headerlink" title="unity安装"></a>unity安装</h2><p>我们先创建一个新项目，之前我们需要安装unity，现在是用unity hub这个软件，在这个软件中下载我们的unity编辑器。<br><img src="/posts/463f42bc/Unity_Hub_nfBzdZhVD5.png" alt><br>下载地址在unity官方网站，然后你就下就行了。<br>之后选择一个需要的编辑器版本，选个稳定版就可以了<br><img src="/posts/463f42bc/Snipaste_2023-01-19_20-20-10.png" alt><br><img src="/posts/463f42bc/Unity_Hub_Rei4aGS4xO.png" alt><br>随便选择一个版本即可。</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>然后我们创建一个新项目3d即可<br><img src="/posts/463f42bc/Snipaste_2023-01-19_20-27-00.png" alt><br><img src="/posts/463f42bc/Snipaste_2023-01-19_20-27-41.png" alt><br><img src="/posts/463f42bc/Snipaste_2023-01-19_20-27-14.png" alt><br>我们的新项目就创建好了<br>之后我们就可以大展拳脚了。</p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>游戏引擎</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>unity</tag>
        <tag>游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>八皇后思路与解法</title>
    <url>/posts/e0ec785f.html</url>
    <content><![CDATA[<p>这是一个关于我自己对于八皇后问题的看法，当然结合了很多网上的思路。</p>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>先从这个说起吧，先分析一下问题，就是有一个$8\times8$的一个棋盘，要往其中放8个皇后棋子，使各个皇后棋子不能互相攻击到。</p>
<p>皇后的攻击范围是他的横向、纵向和斜向，这几个方向</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">↖</th>
<th></th>
<th>↑</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td>↖</td>
<td>↑</td>
<td>↗</td>
</tr>
<tr>
<td style="text-align:center">←</td>
<td>←</td>
<td>○</td>
<td>→</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td>↙</td>
<td>↓</td>
<td>↘</td>
</tr>
</tbody>
</table>
</div>
<p>就比如这个皇后攻击范围图，所以我们要通过搜索和回溯来进行判断。</p>
<span id="more"></span>
<h3 id="具体做法"><a href="#具体做法" class="headerlink" title="具体做法"></a>具体做法</h3><p>用到的头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>定义一个皇后的结构体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Queen</span>&#123;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="type">int</span> y;</span><br><span class="line">&#125;q[<span class="number">16</span>];<span class="comment">//皇后结构体，存皇后位置,先声明了一个结构体数组q[16]</span></span><br></pre></td></tr></table></figure>
<p>因为皇后能攻击到横向的所以敌人，所以每行我们只用放一个皇后就OK了，横向的问题解决了，接下来纵向和斜向的问题，我采用的是纵向循环一遍这个皇后放置的位置，判断是否能被其他皇后纵向和斜向攻击到。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(y=<span class="number">0</span>;y&lt;n;y++)&#123;<span class="comment">//循环皇后纵向位置，i为第几个皇后，i-1是皇后的横向位置，n为共有几个皇后</span></span><br><span class="line">	f=<span class="literal">true</span>;</span><br><span class="line">  	<span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">  		q[i<span class="number">-1</span>].x=i<span class="number">-1</span>;</span><br><span class="line">  		q[i<span class="number">-1</span>].y=y;</span><br><span class="line">  		<span class="built_in">HuangHou</span>(n,i+<span class="number">1</span>);</span><br><span class="line">  		<span class="keyword">continue</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">  	<span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;i<span class="number">-1</span>;m++)&#123;<span class="comment">//遍历已经存入的皇后位置</span></span><br><span class="line">  		<span class="keyword">if</span>(q[m].y==y)&#123;<span class="comment">//判断能否被纵向攻击</span></span><br><span class="line">  			f=<span class="literal">false</span>;</span><br><span class="line">  			<span class="keyword">break</span>;</span><br><span class="line">  		&#125;</span><br><span class="line">  		<span class="keyword">if</span>(q[m].x-q[m].y==i<span class="number">-1</span>-y||q[m].x+q[m].y==i<span class="number">-1</span>+y)&#123;<span class="comment">//判断能否被斜向攻击</span></span><br><span class="line">  			f=<span class="literal">false</span>;</span><br><span class="line">  			<span class="keyword">break</span>;</span><br><span class="line">  		&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">    <span class="keyword">if</span>(f)&#123;</span><br><span class="line">		q[i<span class="number">-1</span>].x=i<span class="number">-1</span>;</span><br><span class="line">		q[i<span class="number">-1</span>].y=y;</span><br><span class="line">        <span class="comment">//存入第i个皇后位置</span></span><br><span class="line">		<span class="built_in">HuangHou</span>(n,i+<span class="number">1</span>);<span class="comment">//递归下一个皇后位置</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$q[m].x-q[m].y==i-1-y$为右斜方向皇后攻击能否被攻击到</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">○</th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">↘</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">↘</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">↘</td>
</tr>
</tbody>
</table>
</div>
<p>$q[m].x+q[m].y==i-1+y$为左斜方向皇后攻击能否被攻击到</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center">○</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">↙</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">↙</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">↙</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>之后不断递归直到当前将放的皇后数大于需要放置的皇后数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(i&gt;n)&#123;</span><br><span class="line">	sum++;<span class="comment">//答案总和加一 </span></span><br><span class="line">	<span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;n;m++)&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;q[m].x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;q[m].y&lt;&lt;<span class="string">&quot;)&quot;</span>;<span class="comment">//输出答案 </span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Queen</span>&#123;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="type">int</span> y;</span><br><span class="line">&#125;q[<span class="number">16</span>];<span class="comment">//皇后结构体，存皇后位置  </span></span><br><span class="line"><span class="type">bool</span> f=<span class="literal">false</span>;<span class="comment">//指示是否弄插入皇后 </span></span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;<span class="comment">//答案总和 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuangHou</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> m,y;</span><br><span class="line">	f=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(i&gt;n)&#123;</span><br><span class="line">		sum++;<span class="comment">//答案总和加一 </span></span><br><span class="line">		<span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;n;m++)&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;q[m].x&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;q[m].y&lt;&lt;<span class="string">&quot;)&quot;</span>;<span class="comment">//输出答案 </span></span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(y=<span class="number">0</span>;y&lt;n;y++)&#123;<span class="comment">//循环皇后纵向位置，i为第几个皇后，i-1是皇后的横向位置</span></span><br><span class="line">		f=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">			q[i<span class="number">-1</span>].x=i<span class="number">-1</span>;</span><br><span class="line">			q[i<span class="number">-1</span>].y=y;</span><br><span class="line">			<span class="built_in">HuangHou</span>(n,i+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;i<span class="number">-1</span>;m++)&#123;<span class="comment">//遍历已经存入的皇后位置</span></span><br><span class="line">			<span class="keyword">if</span>(q[m].y==y)&#123;<span class="comment">//判断能否被纵向攻击</span></span><br><span class="line">				f=<span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(q[m].x-q[m].y==i<span class="number">-1</span>-y||q[m].x+q[m].y==i<span class="number">-1</span>+y)&#123;<span class="comment">//判断能否被斜向攻击</span></span><br><span class="line">				f=<span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(f)&#123;</span><br><span class="line">			q[i<span class="number">-1</span>].x=i<span class="number">-1</span>;</span><br><span class="line">			q[i<span class="number">-1</span>].y=y;</span><br><span class="line">			<span class="comment">//存入第i个皇后位置</span></span><br><span class="line">			<span class="built_in">HuangHou</span>(n,i+<span class="number">1</span>);<span class="comment">//递归下一个皇后位置</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;<span class="comment">//输入几个皇后 </span></span><br><span class="line">	<span class="built_in">HuangHou</span>(n,<span class="number">1</span>);</span><br><span class="line">	cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>感觉自己思路很混乱不过也算写了出来，就这样过吧。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>算法</tag>
        <tag>Cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>（Draw Calls）unity的优化</title>
    <url>/posts/4ba942f5.html</url>
    <content><![CDATA[<p>资料来自<a href="https://www.bilibili.com/video/BV1Bq4y1M7AM/?spm_id_from=333.999.0.0&amp;vd_source=9f7ac696acfb8c89b81b47441148dcf6">【Unity】学到赚到！几个小动作让帧数立刻提升200倍！Unity性能优化之Draw Calls_哔哩哔哩_bilibili</a></p>
<h1 id="Draw-Calls"><a href="#Draw-Calls" class="headerlink" title="Draw Calls"></a>Draw Calls</h1><p><img src="/posts/4ba942f5/Snipaste_2023-02-13_16-17-03.png" alt><br>对于网格上的每一种材质还会创建额外的绘制调用，如果我们有两个材质一个网格那就是两个绘制调用，可以表示为$Mesh\times Materials=Draw Calls$<br><img src="/posts/4ba942f5/Snipaste_2023-02-13_16-25-11.png" alt><br>为啥会出现问题呢，因为我们调用绘制时会先经过CPU处理，如果过多的调用会卡在CPU部分<br><img src="/posts/4ba942f5/Snipaste_2023-02-13_16-28-20.png" alt></p>
<h1 id="合并网格"><a href="#合并网格" class="headerlink" title="合并网格"></a>合并网格</h1><p>所以我们应该减少绘制调用，我们要做的第一件事是去合并网格，这个操作是在你的模型项目工程中进行的。<br>【操作部分等下补充】</p>
<h1 id="单一材质"><a href="#单一材质" class="headerlink" title="单一材质"></a>单一材质</h1><p>之后我们还要优化的话需要让其只拥有单一材质，这样绘制调用会更少。</p>
<h1 id="合批处理"><a href="#合批处理" class="headerlink" title="合批处理"></a>合批处理</h1><p>如果还需要高性能的优化，我们可以使用合批处理，这个方法的工作原理是在将网格发送到GPU之前将unity的网格合成为单个网格，这显著的减少了绘制调用的数量，<em>（合批处理仅适用于具有相同材质的对象）</em>，有两种合批处理的方式我们可以控制</p>
<h2 id="静态合批"><a href="#静态合批" class="headerlink" title="静态合批"></a>静态合批</h2><p>第一种是<strong>静态合批</strong><br><img src="/posts/4ba942f5/Snipaste_2023-02-13_16-44-08.png" alt><br>这只能适用于不会在您的游戏中移动的对象</p>
<h2 id="GPU实例化"><a href="#GPU实例化" class="headerlink" title="GPU实例化"></a>GPU实例化</h2><p>如果你想在合批处理中移动对象，使用这个方法，这个方法<strong>仅适用于具有相同网格核相同材质的对象</strong><br>直接在材质中启用GPU实例化<br><img src="/posts/4ba942f5/Snipaste_2023-02-13_16-47-55.png" alt></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/posts/4ba942f5/Snipaste_2023-02-13_16-48-59.png" alt><br><code>静态合批</code>：必须有相同的材质且不能移动。<br><code>GPU实例化</code>：必须有相同的材质和网格。<br><strong>提示：</strong></p>
<ol>
<li>合并网格在你的模型工程中</li>
<li>减少材质数量</li>
<li>如果不会移动物理可以使用静态合批</li>
<li>需要移动的应该使用GPU实例化</li>
</ol>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>游戏引擎</category>
        <category>Unity</category>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>游戏开发</tag>
        <tag>性能优化</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Volta——nodejs版本管理工具</title>
    <url>/posts/cee1f07f.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>这是一个类似于nvm的nodejs版本管理工具</p>
<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul>
<li>Speed ⚡</li>
<li>Seamless, per-project version switching</li>
<li>Cross-platform support, including Windows and all Unix shells</li>
<li>Support for multiple package managers</li>
<li>Stable tool installation—no reinstalling on every Node upgrade!</li>
<li>Extensibility hooks for site-specific customization<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1>安装非常的方便，可以看他的官网有安装教程，这里我是用的wsl，使用一条命令一键安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://get.volta.sh | bash</span><br></pre></td></tr></table></figure>
如果你是macos也可以使用上述命令安装，如果是windows用户则需要安装官网的安装包进行安装<br><a href="https://docs.volta.sh/guide/getting-started">Getting Started | Volta</a><br>之后如果你是linux系统的刷新下环境变量，让volta生效<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
        <category>工具</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>nodejs</tag>
        <tag>后端</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>git配置ssh</title>
    <url>/posts/c8c56574.html</url>
    <content><![CDATA[<h1 id="设置Git的user-name和email"><a href="#设置Git的user-name和email" class="headerlink" title="设置Git的user name和email"></a>设置Git的user name和email</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;name&quot;</span>  </span><br><span class="line">git config --global user.email <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="生成SSH密钥过程"><a href="#生成SSH密钥过程" class="headerlink" title="生成SSH密钥过程"></a>生成SSH密钥过程</h1><ol>
<li>查看是否已经有了ssh密钥：cd ~/.ssh<br>如果没有密钥则不会有此文件夹，有则备份删除  </li>
<li>生成密钥：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>计算机</category>
        <category>工具</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp-httplib的使用</title>
    <url>/posts/8305d18e.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是一个单头文件的C++11标准编写的跨平台的HTTP/HTTPS库。<br>他是非常简单去设置。只需要include这个<code>httplib.h</code>头文件到你的代码！<br>    NOTE：这个库使用 ‘blocking’socket I/O 。如果你正在寻找 ‘non-blocking’ socket I/O，这个库不是你想要的那个。</p>
<h1 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h1><h2 id="服务端（多线程）"><a href="#服务端（多线程）" class="headerlink" title="服务端（多线程）"></a>服务端（多线程）</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CPPHTTPLIB_OPENSSL_SUPPORT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;path/to/httplib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP</span></span><br><span class="line">httplib::Server svr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTPS</span></span><br><span class="line">httplib::SSLServer svr;</span><br><span class="line"></span><br><span class="line">svr.<span class="built_in">Get</span>(<span class="string">&quot;/hi&quot;</span>, [](<span class="type">const</span> httplib::Request &amp;, httplib::Response &amp;res) &#123;</span><br><span class="line">  res.<span class="built_in">set_content</span>(<span class="string">&quot;Hello World!&quot;</span>, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">svr.<span class="built_in">listen</span>(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">8080</span>);</span><br></pre></td></tr></table></figure>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CPPHTTPLIB_OPENSSL_SUPPORT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;path/to/httplib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP</span></span><br><span class="line"><span class="function">httplib::Client <span class="title">cli</span><span class="params">(<span class="string">&quot;http://cpp-httplib-server.yhirose.repl.co&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTPS</span></span><br><span class="line"><span class="function">httplib::Client <span class="title">cli</span><span class="params">(<span class="string">&quot;https://cpp-httplib-server.yhirose.repl.co&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> res = cli.<span class="built_in">Get</span>(<span class="string">&quot;/hi&quot;</span>);</span><br><span class="line">res-&gt;status;</span><br><span class="line">res-&gt;body;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机</category>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>学习记录</tag>
        <tag>库</tag>
        <tag>cpp</tag>
        <tag>cpp工具</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>通过使用wsl导出功能完成linux子系统的迁移</title>
    <url>/posts/63d5c49f.html</url>
    <content><![CDATA[<h1 id="导出Linux子系统"><a href="#导出Linux子系统" class="headerlink" title="导出Linux子系统"></a>导出Linux子系统</h1><p>这里我们先使用命令如下获取到linux子系统的名字和状态，如果状态在运行则需要停止。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wsl --list --verbose\\获取状态</span><br><span class="line">wsl --shutdown\\停止所有linux子系统</span><br></pre></td></tr></table></figure><br>在之后我们需要使用export命定，这里注意导出的路径要包含导出到的文件，下面命令的<code>LinuxName</code>换成你要转换的Linux子系统的名字，<code>Path</code>改成你要导出的路径（注意此路径包含导出到的文件名）<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wsl --export LinuxName Path</span><br></pre></td></tr></table></figure><br>之后我们就可以注销我们原来的子系统，然后就是导出我们导出的Linux子系统到我们想要放置的位置。下面的命令<code>LinuxName</code>换成你要注销的Linux子系统的名字，这里我们要注销的就是我们刚刚导出的Linux子系统的名字。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wsl --unregister LinuxName</span><br></pre></td></tr></table></figure></p>
<h1 id="导入Linux子系统"><a href="#导入Linux子系统" class="headerlink" title="导入Linux子系统"></a>导入Linux子系统</h1><p>在执行完之前的操作后我们就可以将我们导出的Linux子系统文件导入到我们想要放置的位置，执行以下命令，这里<code>LinuxName</code>替换成一个你想要的名字，<code>ImportPath</code>替换成你要导入的位置路径，<code>LinuxExportFilePath</code>替换成你要导入的Linux子系统导出的文件（这里的导出文件就是我们刚刚导出的Linux子系统文件）<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wsl --import LinxName ImportPath LinuxExportFilePath</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>Linux</category>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>WSL</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
